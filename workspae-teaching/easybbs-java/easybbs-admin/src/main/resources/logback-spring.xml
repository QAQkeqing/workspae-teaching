<?xml version="1.0" encoding="UTF-8" ?>
<!-- 根节点<configuration>
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="ture" scanPeriod="10 minutes">
    <!--
        子节点<appender> 负责写日志的组件
        name：appender名称
        class：指定appender的全限定名：ch.qos.logback.core.ConsoleAppender
    -->
    <appender name="stdot" class="ch.qos.logback.core.ConsoleAppender">
        <!-- Layout 是Logback中的组件，负责将到来的event转换成 String -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!-- 负责输出日志格式 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss,GMT+8} [%p] [%c] [%M] [%L] -> %m%n</pattern>
        </layout>
    </appender>

    <!--
        子节点<springProperty>
        source：指定的是在application.xml或application.properties配置文件中配置变量
        name：变量的名称
        scope：规定设置属性的作用域，该属性有两个值：context 和 local
            local 是设置到 interpretaionContext 的属性map中，局部使用；
            context 是设置到 interpretaionContext 中的上下文（是log的上下文），全局可使用
    -->
    <springProperty scope="context" name="log.path" source="project.folder" />
    <springProperty scope="context" name="log.root.level" source="log.root.level"/>

    <!--
        子节点<property> 用来定义变量值，通过定义的值会被插入到logger上下文中
        name：变量名称
        value：变量的值
     -->
    <property name="LOG_FOLDER" value="logs" />
    <property name="LOG_FILE_NAME" value="easybbs-admin.log"/>

    <!--
        子节点<appender> 负责写日志的组件
        name：appender名称
        class：指定appender的全限定名：ch.qos.logback.core.ConsoleAppender
    -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
            子节点<file> 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值
         -->
        <file>${log.path}/${LOG_FOLDER}/${LOG_FILE_NAME}</file>
        <!-- 时间滚动策略可以基于时间滚动按时间生成日志 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
                <fileNamePattern>
                fileNamePattern配置项是作为TimeBasedRollingPolicy的一个配置项被定义。
                该配置项主要是用来定制化一个日志的流转策略
             -->
            <fileNamePattern>${log.path}/${LOG_FOLDER}/${LOG_FILE_NAME}.%d{yyyyMMdd}</fileNamePattern>
            <!--
                cleanHistoryOnStart控制是否在项目启动的时候检查是否需要删除归档日志
                true 开启
                false 关闭
             -->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
            <!--
                基于时间的滚动策略
                MaxFileSize：文件最大大小
            -->
            <totalSizeCap>20MB</totalSizeCap>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!--
            子节点 <encoder>
            对记录事件进行格式化
            c{length } / lo{length} / log{length}：输出日志的logger名，可有一个整形参数，功能是缩短logger名，设置为0表示只输入logger最右边点符号之后的字符串
            C{length} / class {length}：输出执行记录请求的调用者的全限定名。参数与上面的一样。尽量避免使用，除非执行速度不造成任何问题。
            contextName：输出上下文名称。
            date{pattern} / d{pattern}：输出日期，模式语法与java.text.SimpleDateFormat 兼容。
            F / file：输出执行记录请求的java源文件名。尽量避免使用，除非执行速度不造成任何问题。
            L / line：输出执行日志请求的行号。尽量避免使用，除非执行速度不造成任何问题。
            m / msg / message：输出应用程序提供的信息。
            M / method：输出执行日志请求的方法名。尽量避免使用，除非执行速度不造成任何问题。
            n：输出分行符“\n”或者“\r\n”。
            p / le / level：输出日志级别。
            r / relative：输出从程序启动到创建日志记录的时间，单位是毫秒。
            t / thread：输出产生日志的线程名。
            replace(p ){r, t}：p 为日志内容，r 是正则表达式，将p 中符合r 的内容替换为t 。例如， “%replace(%msg){’\s’, ‘’}”

            配色版：
            %black, %red, %green,%yellow,%blue, %magenta,%cyan,
            %white, %gray,%boldRed,%boldGreen, %boldYellow, %boldBlue,
            %boldMagenta,%boldCyan, %boldWhite,%highlight
        -->
        <encoder>
            <!-- 设置输出编码格式 -->
            <charset>utf-8</charset>
            <!-- 负责输出日志格式 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss,GMT+8} [%p] [%c] [%M] [%L] -> %m%n</pattern>
        </encoder>
        <!--
            子节点 <append>
            true：日志被追加到文件结尾
            false：清空现存文件，默认是true
        -->
        <append>false</append>
        <!--
            子节点 <prudent>
            true：日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低
            false：关闭安全的写入文件(默认值)
        -->
        <prudent>false</prudent>
    </appender>
    <!--
        子节点 <root>
        level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，不能设置为INHERITED或者同义词NULL。 默认是DEBUG
    -->
    <root level="${log.root.level}">
        <appender-ref ref="stdot" />
        <appender-ref ref="file" />
    </root>

</configuration>